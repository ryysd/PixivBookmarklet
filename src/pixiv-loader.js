// Generated by CoffeeScript 1.6.3
var BootBox, BootProgress, Debug, LoaderProgressBox, PixivBookmarklet, PixivParser, PixivURL, extractNum, insertButton, isTargetPage, loadDependencies;

extractNum = function(str) {
  var num;
  num = (new String(str)).match(/\d/g);
  if (num != null) {
    return num.join('');
  }
};

Debug = (function() {
  function Debug() {}

  Debug.print = function(html) {
    return ($('html')).html(html);
  };

  return Debug;

})();

PixivURL = (function() {
  function PixivURL() {}

  PixivURL.host = 'http://www.pixiv.net';

  PixivURL.actions = {
    login: 'login.php',
    bookmark: 'bookmark.php',
    memberIllust: 'member_illust.php'
  };

  PixivURL.makeURL = function(action) {
    return "" + this.host + "/" + this.actions[action];
  };

  return PixivURL;

})();

PixivParser = (function() {
  function PixivParser() {}

  PixivParser.parseBookmarkPage = function(html) {
    var $count, $current, $illusts, $next, $page, $prev, count, illust, illusts;
    $page = $(html);
    $count = ($page.find('.column-label')).find('.count-badge');
    $illusts = ($page.find('.display_works')).find('li');
    $next = $page.find('.sprites-next-linked');
    $prev = $page.find('.sprites-prev-linked');
    $current = $((($page.find('.page-list')).children(' .current'))[0]);
    count = extractNum($count.text());
    illusts = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = $illusts.length; _i < _len; _i++) {
        illust = $illusts[_i];
        if ((($(illust)).find('img')).length) {
          _results.push({
            id: extractNum((($(illust)).find('.work')).attr('href')),
            title: (($(illust)).find('.work')).text(),
            tags: (($(illust)).find('img')).attr('data-tags'),
            author: ''
          });
        }
      }
      return _results;
    })();
    return {
      count: count,
      illusts: illusts,
      current: parseInt($current.text()),
      hasNext: $next.length !== 0,
      hasPrev: $prev.length !== 0
    };
  };

  PixivParser.parseMemberIllustPage = function(html) {
    return PixivParser.parseBookmarkPage(html);
  };

  PixivParser.parseIllustPage = function(html) {
    var $image, $page, author, mode, url;
    $page = $(html);
    $image = ($page.find('.works_display')).find('img');
    mode = (($image.parent().attr('href')).match(/mode=([^&]*)/))[1];
    author = ($page.find('.user')).text();
    url = ($image.attr('src')).replace('_m', '');
    return {
      image: url,
      author: author,
      mode: mode
    };
  };

  PixivParser.parseMangaPage = function(html) {
    var $items, $page, images, item, _i, _len, _results;
    $page = $(html);
    $items = $page.find('.item-container');
    _results = [];
    for (_i = 0, _len = $items.length; _i < _len; _i++) {
      item = $items[_i];
      _results.push(images = ((($(item)).find('img')).attr('data-src')).replace(/p([0-9]+)/, 'big_p$1'));
    }
    return _results;
  };

  return PixivParser;

})();

PixivBookmarklet = (function() {
  function PixivBookmarklet() {}

  PixivBookmarklet.downloadIllust = function(illust, url) {
    var ext, title;
    ext = (url.split('.')).pop();
    title = "" + illust.author + "_" + illust.title + "(" + illust.id + ")." + ext;
    return downloadFile(url, title);
  };

  PixivBookmarklet.downloadManga = function(illust, url) {
    return $.get(PixivBookmarklet.makeMangaPageUrlFromId(illust.id), null, function(data) {
      var images, img, _i, _len, _results;
      images = PixivParser.parseMangaPage(data);
      _results = [];
      for (_i = 0, _len = images.length; _i < _len; _i++) {
        img = images[_i];
        _results.push(PixivBookmarklet.downloadIllust(illust, img));
      }
      return _results;
    });
  };

  PixivBookmarklet.getImageUrlFromIllustPage = function(url, callback) {
    return $.get(url, null, function(data) {
      return callback(PixivParser.parseIllustPage(data));
    });
  };

  PixivBookmarklet.makeIllustPageUrlFromId = function(id) {
    return (PixivURL.makeURL('memberIllust')) + '?mode=medium&illust_id=' + id;
  };

  PixivBookmarklet.makeMangaPageUrlFromId = function(id) {
    return (PixivURL.makeURL('memberIllust')) + '?mode=manga&illust_id=' + id;
  };

  PixivBookmarklet.makeIllustPageUrlsFromIllusts = function(illusts) {
    var illust, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = illusts.length; _i < _len; _i++) {
      illust = illusts[_i];
      if (illust.id != null) {
        _results.push(PixivBookmarklet.makeIllustPageUrlFromId(illust.id));
      }
    }
    return _results;
  };

  PixivBookmarklet.downloadIllusts = function(illusts, options) {
    var latency, urls, _downloadIllusts;
    latency = (options != null) && (options.latency != null) ? options.latency : 0;
    urls = PixivBookmarklet.makeIllustPageUrlsFromIllusts(illusts);
    _downloadIllusts = function(idx) {
      var next;
      if (idx < urls.length) {
        next = idx + 1;
        return PixivBookmarklet.getImageUrlFromIllustPage(urls[idx], function(url) {
          var dl, illust, _rec;
          dl = url.mode === 'manga' ? PixivBookmarklet.downloadManga : PixivBookmarklet.downloadIllust;
          illust = illusts[idx];
          illust.author = url.author;
          dl(illust, url.image);
          if ((options != null) && (options.progress != null)) {
            options.progress(url, idx);
          }
          _rec = function() {
            return _downloadIllusts(next);
          };
          return setTimeout(_rec, latency);
        });
      }
    };
    return _downloadIllusts(0);
  };

  PixivBookmarklet.downloadIllustsWithProgress = function(illusts) {
    var $modal, cnt, onEnd, onProgress, progress;
    progress = new LoaderProgressBox();
    $modal = progress.show();
    cnt = 0;
    onEnd = function() {
      return $modal.modal('hide');
    };
    onProgress = function(url) {
      progress.setProgress(++cnt, illusts.length);
      if (cnt >= illusts.length) {
        return onEnd();
      }
    };
    return PixivBookmarklet.downloadIllusts(illusts, {
      progress: onProgress
    });
  };

  PixivBookmarklet.readSequentialPage = function(url, from, to, options) {};

  PixivBookmarklet.downloadAllBookmarkIllusts = function(html, options) {
    var done, _downloadAllBookmarkIllusts;
    done = [];
    _downloadAllBookmarkIllusts = function(_html) {
      var result;
      result = PixivBookmarklet.downloadBookmarkIllusts(_html, options);
      done[result.current] = true;
      if (result.hasNext && !done[result.current + 1]) {
        $.get(location.href + ("&p=" + (result.current + 1)), null, function(data) {
          return _downloadAllBookmarkIllusts(data);
        });
      }
      if (result.hasPrev && !done[result.current - 1]) {
        return $.get(location.href + ("&p=" + (result.current - 1)), null, function(data) {
          return _downloadAllBookmarkIllusts(data);
        });
      }
    };
    return _downloadAllBookmarkIllusts(html);
  };

  PixivBookmarklet.downloadBookmarkIllusts = function(html, options) {
    var illusts, result;
    result = PixivParser.parseBookmarkPage(html);
    illusts = result.illusts;
    if ((options != null) && options.showProgress) {
      PixivBookmarklet.downloadIllustsWithProgress(illusts);
    } else {
      PixivBookmarklet.downloadIllusts(illusts);
    }
    return result;
  };

  PixivBookmarklet.downloadMemberIllusts = function(html, options) {
    return PixivBookmarklet.downloadBookmarkIllusts(html, options);
  };

  PixivBookmarklet.isBookmarkPage = function() {
    return location.href.indexOf(PixivURL.makeURL('bookmark')) !== -1;
  };

  PixivBookmarklet.isMemberIllustPage = function() {
    return location.href.indexOf(PixivURL.makeURL('memberIllust')) !== -1;
  };

  return PixivBookmarklet;

})();

BootProgress = (function() {
  function BootProgress(options) {
    this.$progress = ($('<div></div>')).attr('class', 'progress progress-striped active');
    this.$progressBar = ($('<div></div>')).attr({
      "class": "progress-bar progress-bar-" + (options.type || 'success'),
      role: 'progressbar'
    });
    this.$progressBar.css('width', '0%');
    this.$text = $('<span></span>');
    this.$progress.append(this.$progressBar.append(this.$text));
  }

  BootProgress.prototype.setText = function(text) {
    return this.$text.text(text);
  };

  BootProgress.prototype.setPercentage = function(per) {
    return this.$progressBar.css('width', "" + per + "%");
  };

  BootProgress.prototype.appendTo = function($parent) {
    return $parent.append(this.$progress);
  };

  return BootProgress;

})();

BootBox = (function() {
  function BootBox() {}

  BootBox.show = function(content, title, options) {
    var $modal, $modalBody, $modalContent, $modalDialog, $modalFooter, $modalHeader,
      _this = this;
    $modalBody = ($('<div></div>')).attr('class', 'modal-body');
    $modalBody.append(content);
    $modalHeader = (($('<div></div>')).attr('class', 'modal-header')).append((($('<button></button>')).attr({
      type: 'button',
      "class": 'close',
      'data-dismiss': 'modal'
    })).text('×')).append((($('<h4></h4>')).attr('class', 'modal-title')).text(title));
    $modalFooter = ($('<div></div')).attr('class', 'modal-footer').append('<button data-bb-handler="cancel" type="button" class="btn btn-danger">cancel</button>');
    $modal = ($('<div></div>')).attr({
      "class": 'modal fade',
      tabIndex: '-1',
      role: 'dialog'
    });
    $modalDialog = $('<div></div>').attr('class', 'modal-dialog');
    $modalContent = $('<div></div>').attr('class', 'modal-content');
    $modalContent.append($modalHeader);
    $modalContent.append($modalBody);
    $modalContent.append($modalFooter);
    $modalDialog.append($modalContent);
    $modal.append($modalDialog);
    $modal.on('hidden.bs.modal', function() {
      return $modal.remove();
    });
    $modal.modal({
      show: true
    });
    return $modal;
  };

  return BootBox;

})();

LoaderProgressBox = (function() {
  function LoaderProgressBox() {
    var $label;
    this.progress = new BootProgress({
      type: 'success'
    });
    this.$content = $('<div></div>');
    $label = ($('<span></span>')).attr('class', 'col-md-3');
    $label = 'progress';
    this.progress.$progress.attr('class', 'col-md-9');
    this.$content.append($label);
    this.$content.append(this.progress.$progress);
  }

  LoaderProgressBox.prototype.setProgress = function(now, max) {
    this.progress.setText("" + now + "/" + max + " Complete");
    return this.progress.setPercentage(~~(now * 100 / max));
  };

  LoaderProgressBox.prototype.show = function() {
    return BootBox.show(this.$content, 'Now Downloading...');
  };

  return LoaderProgressBox;

})();

loadDependencies = function() {
  var _loadCSS, _loadScript;
  _loadScript = function(url) {
    var s;
    s = $('<script></script>');
    s.attr({
      charset: 'UTF-8',
      type: 'text/javascript',
      src: url
    });
    return ($('head')).append(s);
  };
  _loadCSS = function(url) {
    var s;
    s = $('<link></link>');
    s.attr({
      rel: 'stylesheet',
      type: 'text/css',
      href: url
    });
    return ($('head')).append(s);
  };
  _loadScript('http://localhost/PixivWebPageParser/src/download.js');
  return _loadCSS('http://localhost/PixivWebPageParser/css/btn-design.css');
};

insertButton = function() {
  var $alldlBtn, $div, $dlBtn, $li, $target, $ul;
  $target = $('.column-menu');
  $ul = ($('<ul></ul>')).attr('class', 'menu-items');
  $li = $('<li></li>');
  $div = ($('<div></div')).css('display', 'inline-block');
  $dlBtn = (($('<div></div>')).attr('class', 'btn btn-success')).text('このページをダウンロード');
  $alldlBtn = (($('<div></div>')).attr('class', 'btn btn-primary')).text('全てダウンロード');
  $dlBtn.click(function() {
    return PixivBookmarklet.downloadBookmarkIllusts(document, {
      showProgress: false
    });
  });
  $alldlBtn.click(function() {
    return PixivBookmarklet.downloadAllBookmarkIllusts(document, {
      showProgress: false
    });
  });
  $div.append($dlBtn);
  $div.append($alldlBtn);
  $li.append($div);
  $ul.append($li);
  return $target.append($ul);
};

isTargetPage = function() {
  return (location.href.match(/http:\/\/www.pixiv.net\/bookmark.php(\?id=[0-9]+)?$/) != null) || (location.href.match(/http:\/\/www.pixiv.net\/member_illust.php(\?id=[0-9]+)?$/) != null);
};

$(function() {
  if (isTargetPage()) {
    return insertButton();
  }
});
